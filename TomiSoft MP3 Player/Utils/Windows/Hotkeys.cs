using System;
using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Interop;

namespace TomiSoft.MP3Player.Utils.Windows {
    /// <summary>
    /// Provides functions to registering and unregistering hotkeys.
    /// </summary>
    public static class Hotkeys {
        public const int WM_HOTKEY = 0x0312;

        /// <summary>
        /// Defines a system-wide hot key.
        /// </summary>
        /// <param name="hWnd">
        ///     A handle to the window that will receive WM_HOTKEY messages generated by the hot key.
        ///     If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the
        ///     calling thread and must be processed in the message loop.
        /// </param>
        /// <param name="id">
        ///     The identifier of the hot key. If the hWnd parameter is NULL, then the hot key is
        ///     associated with the current thread rather than with a particular window. If a hot
        ///     key already exists with the same hWnd and id parameters, see Remarks for the action
        ///     taken.
        /// </param>
        /// <param name="fsModifiers">
        ///     The keys that must be pressed in combination with the key specified by the uVirtKey
        ///     parameter in order to generate the WM_HOTKEY message.
        /// </param>
        /// <param name="vk">
        ///     The virtual-key code of the hot key.
        /// </param>
        /// <returns>True if the function succeeds, false otherwise.</returns>
        [DllImport("user32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool RegisterHotKey(IntPtr hWnd, int id, uint fsModifiers, uint vk);

        /// <summary>
        /// Frees a hot key previously registered by the calling thread.
        /// </summary>
        /// <param name="hWnd">
        ///     A handle to the window associated with the hot key to be freed. This parameter should
        ///     be NULL if the hot key is not associated with a window.
        /// </param>
        /// <param name="id">
        ///     The identifier of the hot key to be freed.
        /// </param>
        /// <returns>True if the function succeeds, false otherwise.</returns>
        [DllImport("user32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool UnregisterHotKey(IntPtr hWnd, int id);

        /// <summary>
        /// Registers a hotkey.
        /// </summary>
        /// <param name="HandlerWindow">The window that will be notified if hotkey was pressed</param>
        /// <param name="ID">The ID of the hotkey to be registered with. This will be used when you unregister it.</param>
        /// <param name="Key">The key to register</param>
        /// <returns>True if the registration was successful, false if not or HandlerWindow was null</returns>
        public static bool Register(Window HandlerWindow, int ID, VirtualKey Key) {
            #region Error checking
            if (HandlerWindow == null)
                return false;
            #endregion

            IntPtr hWnd = new WindowInteropHelper(HandlerWindow).Handle;
            return RegisterHotKey(hWnd, ID, 0, (uint)Key);
        }

        /// <summary>
        /// Unregisters a hotkey.
        /// </summary>
        /// <param name="HandlerWindow">The window that is used to register the hotkey</param>
        /// <param name="ID">The ID used when registering the hotkey</param>
        /// <returns>True if the unregistration was successful, false if not or HandlerWindow was null</returns>
        public static bool Unregister(Window HandlerWindow, int ID) {
            #region Error checking
            if (HandlerWindow == null)
                return false;
            #endregion

            IntPtr hWnd = new WindowInteropHelper(HandlerWindow).Handle;
            return UnregisterHotKey(hWnd, ID);
        }
    }
}
